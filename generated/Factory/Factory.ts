// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get tokenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Factory extends ethereum.SmartContract {
  static bind(address: Address): Factory {
    return new Factory("Factory", address);
  }

  deployToken(name: string, symbol: string): Address {
    let result = super.call(
      "deployToken",
      "deployToken(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(symbol)]
    );

    return result[0].toAddress();
  }

  try_deployToken(name: string, symbol: string): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployToken",
      "deployToken(string,string):(address)",
      [ethereum.Value.fromString(name), ethereum.Value.fromString(symbol)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployTokenCall extends ethereum.Call {
  get inputs(): DeployTokenCall__Inputs {
    return new DeployTokenCall__Inputs(this);
  }

  get outputs(): DeployTokenCall__Outputs {
    return new DeployTokenCall__Outputs(this);
  }
}

export class DeployTokenCall__Inputs {
  _call: DeployTokenCall;

  constructor(call: DeployTokenCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class DeployTokenCall__Outputs {
  _call: DeployTokenCall;

  constructor(call: DeployTokenCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
