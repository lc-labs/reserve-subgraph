// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Facade__currentAssetsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Facade extends ethereum.SmartContract {
  static bind(address: Address): Facade {
    return new Facade("Facade", address);
  }

  basketTokens(): Array<Address> {
    let result = super.call("basketTokens", "basketTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_basketTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "basketTokens",
      "basketTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  currentAssets(): Facade__currentAssetsResult {
    let result = super.call(
      "currentAssets",
      "currentAssets():(address[],uint256[])",
      []
    );

    return new Facade__currentAssetsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_currentAssets(): ethereum.CallResult<Facade__currentAssetsResult> {
    let result = super.tryCall(
      "currentAssets",
      "currentAssets():(address[],uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Facade__currentAssetsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  main(): Address {
    let result = super.call("main", "main():(address)", []);

    return result[0].toAddress();
  }

  try_main(): ethereum.CallResult<Address> {
    let result = super.tryCall("main", "main():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxIssuable(account: Address): BigInt {
    let result = super.call("maxIssuable", "maxIssuable(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_maxIssuable(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIssuable",
      "maxIssuable(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stRSRExchangeRate(): BigInt {
    let result = super.call(
      "stRSRExchangeRate",
      "stRSRExchangeRate():(int192)",
      []
    );

    return result[0].toBigInt();
  }

  try_stRSRExchangeRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stRSRExchangeRate",
      "stRSRExchangeRate():(int192)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalAssetValue(): BigInt {
    let result = super.call(
      "totalAssetValue",
      "totalAssetValue():(int192)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalAssetValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalAssetValue",
      "totalAssetValue():(int192)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get main_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class CurrentAssetsCall extends ethereum.Call {
  get inputs(): CurrentAssetsCall__Inputs {
    return new CurrentAssetsCall__Inputs(this);
  }

  get outputs(): CurrentAssetsCall__Outputs {
    return new CurrentAssetsCall__Outputs(this);
  }
}

export class CurrentAssetsCall__Inputs {
  _call: CurrentAssetsCall;

  constructor(call: CurrentAssetsCall) {
    this._call = call;
  }
}

export class CurrentAssetsCall__Outputs {
  _call: CurrentAssetsCall;

  constructor(call: CurrentAssetsCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.outputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.outputValues[1].value.toBigIntArray();
  }
}

export class MaxIssuableCall extends ethereum.Call {
  get inputs(): MaxIssuableCall__Inputs {
    return new MaxIssuableCall__Inputs(this);
  }

  get outputs(): MaxIssuableCall__Outputs {
    return new MaxIssuableCall__Outputs(this);
  }
}

export class MaxIssuableCall__Inputs {
  _call: MaxIssuableCall;

  constructor(call: MaxIssuableCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MaxIssuableCall__Outputs {
  _call: MaxIssuableCall;

  constructor(call: MaxIssuableCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RunAuctionsForAllTradersCall extends ethereum.Call {
  get inputs(): RunAuctionsForAllTradersCall__Inputs {
    return new RunAuctionsForAllTradersCall__Inputs(this);
  }

  get outputs(): RunAuctionsForAllTradersCall__Outputs {
    return new RunAuctionsForAllTradersCall__Outputs(this);
  }
}

export class RunAuctionsForAllTradersCall__Inputs {
  _call: RunAuctionsForAllTradersCall;

  constructor(call: RunAuctionsForAllTradersCall) {
    this._call = call;
  }
}

export class RunAuctionsForAllTradersCall__Outputs {
  _call: RunAuctionsForAllTradersCall;

  constructor(call: RunAuctionsForAllTradersCall) {
    this._call = call;
  }
}

export class StRSRExchangeRateCall extends ethereum.Call {
  get inputs(): StRSRExchangeRateCall__Inputs {
    return new StRSRExchangeRateCall__Inputs(this);
  }

  get outputs(): StRSRExchangeRateCall__Outputs {
    return new StRSRExchangeRateCall__Outputs(this);
  }
}

export class StRSRExchangeRateCall__Inputs {
  _call: StRSRExchangeRateCall;

  constructor(call: StRSRExchangeRateCall) {
    this._call = call;
  }
}

export class StRSRExchangeRateCall__Outputs {
  _call: StRSRExchangeRateCall;

  constructor(call: StRSRExchangeRateCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TotalAssetValueCall extends ethereum.Call {
  get inputs(): TotalAssetValueCall__Inputs {
    return new TotalAssetValueCall__Inputs(this);
  }

  get outputs(): TotalAssetValueCall__Outputs {
    return new TotalAssetValueCall__Outputs(this);
  }
}

export class TotalAssetValueCall__Inputs {
  _call: TotalAssetValueCall;

  constructor(call: TotalAssetValueCall) {
    this._call = call;
  }
}

export class TotalAssetValueCall__Outputs {
  _call: TotalAssetValueCall;

  constructor(call: TotalAssetValueCall) {
    this._call = call;
  }

  get total(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
