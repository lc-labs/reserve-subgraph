// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BUsIssued extends ethereum.Event {
  get params(): BUsIssued__Params {
    return new BUsIssued__Params(this);
  }
}

export class BUsIssued__Params {
  _event: BUsIssued;

  constructor(event: BUsIssued) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get by(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get BUs(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BUsRedeemed extends ethereum.Event {
  get params(): BUsRedeemed__Params {
    return new BUsRedeemed__Params(this);
  }
}

export class BUsRedeemed__Params {
  _event: BUsRedeemed;

  constructor(event: BUsRedeemed) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get by(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get BUs(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BUsTransferred extends ethereum.Event {
  get params(): BUsTransferred__Params {
    return new BUsTransferred__Params(this);
  }
}

export class BUsTransferred__Params {
  _event: BUsTransferred;

  constructor(event: BUsTransferred) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get BUs(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get compAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get aaveAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  BU_DECIMALS(): i32 {
    let result = super.call("BU_DECIMALS", "BU_DECIMALS():(uint8)", []);

    return result[0].toI32();
  }

  try_BU_DECIMALS(): ethereum.CallResult<i32> {
    let result = super.tryCall("BU_DECIMALS", "BU_DECIMALS():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  backups(param0: BigInt): Address {
    let result = super.call("backups", "backups(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_backups(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("backups", "backups(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  basketRate(): BigInt {
    let result = super.call("basketRate", "basketRate():(int192)", []);

    return result[0].toBigInt();
  }

  try_basketRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("basketRate", "basketRate():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basketUnits(param0: Address): BigInt {
    let result = super.call("basketUnits", "basketUnits(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_basketUnits(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basketUnits",
      "basketUnits(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralAt(index: BigInt): Address {
    let result = super.call("collateralAt", "collateralAt(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_collateralAt(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralAt",
      "collateralAt(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  containsOnly(collateral: Array<Address>): boolean {
    let result = super.call("containsOnly", "containsOnly(address[]):(bool)", [
      ethereum.Value.fromAddressArray(collateral)
    ]);

    return result[0].toBoolean();
  }

  try_containsOnly(collateral: Array<Address>): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "containsOnly",
      "containsOnly(address[]):(bool)",
      [ethereum.Value.fromAddressArray(collateral)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getBackups(): Array<Address> {
    let result = super.call("getBackups", "getBackups():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getBackups(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getBackups", "getBackups():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  main(): Address {
    let result = super.call("main", "main():(address)", []);

    return result[0].toAddress();
  }

  try_main(): ethereum.CallResult<Address> {
    let result = super.tryCall("main", "main():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  maxIssuable(issuer: Address): BigInt {
    let result = super.call("maxIssuable", "maxIssuable(address):(uint256)", [
      ethereum.Value.fromAddress(issuer)
    ]);

    return result[0].toBigInt();
  }

  try_maxIssuable(issuer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIssuable",
      "maxIssuable(address):(uint256)",
      [ethereum.Value.fromAddress(issuer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quantity(collateral: Address): BigInt {
    let result = super.call("quantity", "quantity(address):(uint256)", [
      ethereum.Value.fromAddress(collateral)
    ]);

    return result[0].toBigInt();
  }

  try_quantity(collateral: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quantity", "quantity(address):(uint256)", [
      ethereum.Value.fromAddress(collateral)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  size(): BigInt {
    let result = super.call("size", "size():(uint256)", []);

    return result[0].toBigInt();
  }

  try_size(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("size", "size():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenAmounts(BUs: BigInt): Array<BigInt> {
    let result = super.call(
      "tokenAmounts",
      "tokenAmounts(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(BUs)]
    );

    return result[0].toBigIntArray();
  }

  try_tokenAmounts(BUs: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tokenAmounts",
      "tokenAmounts(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(BUs)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  totalUnits(): BigInt {
    let result = super.call("totalUnits", "totalUnits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalUnits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalUnits", "totalUnits():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get collateral(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get quantities(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get backupVaults(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BasketRateCall extends ethereum.Call {
  get inputs(): BasketRateCall__Inputs {
    return new BasketRateCall__Inputs(this);
  }

  get outputs(): BasketRateCall__Outputs {
    return new BasketRateCall__Outputs(this);
  }
}

export class BasketRateCall__Inputs {
  _call: BasketRateCall;

  constructor(call: BasketRateCall) {
    this._call = call;
  }
}

export class BasketRateCall__Outputs {
  _call: BasketRateCall;

  constructor(call: BasketRateCall) {
    this._call = call;
  }

  get sum(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ClaimAndSweepRewardsToManagerCall extends ethereum.Call {
  get inputs(): ClaimAndSweepRewardsToManagerCall__Inputs {
    return new ClaimAndSweepRewardsToManagerCall__Inputs(this);
  }

  get outputs(): ClaimAndSweepRewardsToManagerCall__Outputs {
    return new ClaimAndSweepRewardsToManagerCall__Outputs(this);
  }
}

export class ClaimAndSweepRewardsToManagerCall__Inputs {
  _call: ClaimAndSweepRewardsToManagerCall;

  constructor(call: ClaimAndSweepRewardsToManagerCall) {
    this._call = call;
  }
}

export class ClaimAndSweepRewardsToManagerCall__Outputs {
  _call: ClaimAndSweepRewardsToManagerCall;

  constructor(call: ClaimAndSweepRewardsToManagerCall) {
    this._call = call;
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get BUs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class PullBUsCall extends ethereum.Call {
  get inputs(): PullBUsCall__Inputs {
    return new PullBUsCall__Inputs(this);
  }

  get outputs(): PullBUsCall__Outputs {
    return new PullBUsCall__Outputs(this);
  }
}

export class PullBUsCall__Inputs {
  _call: PullBUsCall;

  constructor(call: PullBUsCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get BUs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullBUsCall__Outputs {
  _call: PullBUsCall;

  constructor(call: PullBUsCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get BUs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAllowanceCall extends ethereum.Call {
  get inputs(): SetAllowanceCall__Inputs {
    return new SetAllowanceCall__Inputs(this);
  }

  get outputs(): SetAllowanceCall__Outputs {
    return new SetAllowanceCall__Outputs(this);
  }
}

export class SetAllowanceCall__Inputs {
  _call: SetAllowanceCall;

  constructor(call: SetAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get BUs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAllowanceCall__Outputs {
  _call: SetAllowanceCall;

  constructor(call: SetAllowanceCall) {
    this._call = call;
  }
}

export class SetBackupsCall extends ethereum.Call {
  get inputs(): SetBackupsCall__Inputs {
    return new SetBackupsCall__Inputs(this);
  }

  get outputs(): SetBackupsCall__Outputs {
    return new SetBackupsCall__Outputs(this);
  }
}

export class SetBackupsCall__Inputs {
  _call: SetBackupsCall;

  constructor(call: SetBackupsCall) {
    this._call = call;
  }

  get backupVaults(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class SetBackupsCall__Outputs {
  _call: SetBackupsCall;

  constructor(call: SetBackupsCall) {
    this._call = call;
  }
}

export class SetMainCall extends ethereum.Call {
  get inputs(): SetMainCall__Inputs {
    return new SetMainCall__Inputs(this);
  }

  get outputs(): SetMainCall__Outputs {
    return new SetMainCall__Outputs(this);
  }
}

export class SetMainCall__Inputs {
  _call: SetMainCall;

  constructor(call: SetMainCall) {
    this._call = call;
  }

  get main_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMainCall__Outputs {
  _call: SetMainCall;

  constructor(call: SetMainCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
