// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RTokenCreated extends ethereum.Event {
  get params(): RTokenCreated__Params {
    return new RTokenCreated__Params(this);
  }
}

export class RTokenCreated__Params {
  _event: RTokenCreated;

  constructor(event: RTokenCreated) {
    this._event = event;
  }

  get main(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get stRSR(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get facade(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class Deployer__deployInputParamsStruct extends ethereum.Tuple {
  get maxAuctionSize(): BigInt {
    return this[0].toBigInt();
  }

  get dist(): Deployer__deployInputParamsDistStruct {
    return changetype<Deployer__deployInputParamsDistStruct>(this[1].toTuple());
  }

  get rewardPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get rewardRatio(): BigInt {
    return this[3].toBigInt();
  }

  get unstakingDelay(): BigInt {
    return this[4].toBigInt();
  }

  get auctionDelay(): BigInt {
    return this[5].toBigInt();
  }

  get auctionLength(): BigInt {
    return this[6].toBigInt();
  }

  get backingBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[8].toBigInt();
  }

  get dustAmount(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }
}

export class Deployer__deployInputParamsDistStruct extends ethereum.Tuple {
  get rTokenDist(): i32 {
    return this[0].toI32();
  }

  get rsrDist(): i32 {
    return this[1].toI32();
  }
}

export class Deployer extends ethereum.SmartContract {
  static bind(address: Address): Deployer {
    return new Deployer("Deployer", address);
  }

  aave(): Address {
    let result = super.call("aave", "aave():(address)", []);

    return result[0].toAddress();
  }

  try_aave(): ethereum.CallResult<Address> {
    let result = super.tryCall("aave", "aave():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveClaimer(): Address {
    let result = super.call("aaveClaimer", "aaveClaimer():(address)", []);

    return result[0].toAddress();
  }

  try_aaveClaimer(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveClaimer", "aaveClaimer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveLendingPool(): Address {
    let result = super.call(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveLendingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  comp(): Address {
    let result = super.call("comp", "comp():(address)", []);

    return result[0].toAddress();
  }

  try_comp(): ethereum.CallResult<Address> {
    let result = super.tryCall("comp", "comp():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  compoundClaimer(): Address {
    let result = super.call(
      "compoundClaimer",
      "compoundClaimer():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_compoundClaimer(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "compoundClaimer",
      "compoundClaimer():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  comptroller(): Address {
    let result = super.call("comptroller", "comptroller():(address)", []);

    return result[0].toAddress();
  }

  try_comptroller(): ethereum.CallResult<Address> {
    let result = super.tryCall("comptroller", "comptroller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deploy(
    name: string,
    symbol: string,
    owner: Address,
    params: Deployer__deployInputParamsStruct
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(string,string,address,(int192,(uint16,uint16),uint256,int192,uint256,uint256,uint256,int192,int192,int192,int192)):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromTuple(params)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    name: string,
    symbol: string,
    owner: Address,
    params: Deployer__deployInputParamsStruct
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(string,string,address,(int192,(uint16,uint16),uint256,int192,uint256,uint256,uint256,int192,int192,int192,int192)):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromTuple(params)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployments(param0: BigInt): Address {
    let result = super.call("deployments", "deployments(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_deployments(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployments",
      "deployments(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  market(): Address {
    let result = super.call("market", "market():(address)", []);

    return result[0].toAddress();
  }

  try_market(): ethereum.CallResult<Address> {
    let result = super.tryCall("market", "market():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rsr(): Address {
    let result = super.call("rsr", "rsr():(address)", []);

    return result[0].toAddress();
  }

  try_rsr(): ethereum.CallResult<Address> {
    let result = super.tryCall("rsr", "rsr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get rsr_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get comp_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get aave_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get market_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get comptroller_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get aaveLendingPool_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get params(): DeployCallParamsStruct {
    return changetype<DeployCallParamsStruct>(
      this._call.inputValues[3].value.toTuple()
    );
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployCallParamsStruct extends ethereum.Tuple {
  get maxAuctionSize(): BigInt {
    return this[0].toBigInt();
  }

  get dist(): DeployCallParamsDistStruct {
    return changetype<DeployCallParamsDistStruct>(this[1].toTuple());
  }

  get rewardPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get rewardRatio(): BigInt {
    return this[3].toBigInt();
  }

  get unstakingDelay(): BigInt {
    return this[4].toBigInt();
  }

  get auctionDelay(): BigInt {
    return this[5].toBigInt();
  }

  get auctionLength(): BigInt {
    return this[6].toBigInt();
  }

  get backingBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[8].toBigInt();
  }

  get dustAmount(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }
}

export class DeployCallParamsDistStruct extends ethereum.Tuple {
  get rTokenDist(): i32 {
    return this[0].toI32();
  }

  get rsrDist(): i32 {
    return this[1].toI32();
  }
}
