// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class RTokenCreated extends ethereum.Event {
  get params(): RTokenCreated__Params {
    return new RTokenCreated__Params(this);
  }
}

export class RTokenCreated__Params {
  _event: RTokenCreated;

  constructor(event: RTokenCreated) {
    this._event = event;
  }

  get main(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get rToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Deployer__deployInputConfigStruct extends ethereum.Tuple {
  get rewardStart(): BigInt {
    return this[0].toBigInt();
  }

  get rewardPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get auctionPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get stRSRWithdrawalDelay(): BigInt {
    return this[3].toBigInt();
  }

  get defaultDelay(): BigInt {
    return this[4].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[5].toBigInt();
  }

  get auctionClearingTolerance(): BigInt {
    return this[6].toBigInt();
  }

  get maxAuctionSize(): BigInt {
    return this[7].toBigInt();
  }

  get minRecapitalizationAuctionSize(): BigInt {
    return this[8].toBigInt();
  }

  get minRevenueAuctionSize(): BigInt {
    return this[9].toBigInt();
  }

  get migrationChunk(): BigInt {
    return this[10].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[11].toBigInt();
  }

  get defaultThreshold(): BigInt {
    return this[12].toBigInt();
  }

  get f(): BigInt {
    return this[13].toBigInt();
  }
}

export class Deployer__deployInputNonCollateralStruct extends ethereum.Tuple {
  get rsrAsset(): Address {
    return this[0].toAddress();
  }

  get compAsset(): Address {
    return this[1].toAddress();
  }

  get aaveAsset(): Address {
    return this[2].toAddress();
  }
}

export class Deployer extends ethereum.SmartContract {
  static bind(address: Address): Deployer {
    return new Deployer("Deployer", address);
  }

  deploy(
    name: string,
    symbol: string,
    owner: Address,
    vault: Address,
    rsr: Address,
    config: Deployer__deployInputConfigStruct,
    compound: Address,
    aave: Address,
    nonCollateral: Deployer__deployInputNonCollateralStruct,
    collateral: Array<Address>
  ): Address {
    let result = super.call(
      "deploy",
      "deploy(string,string,address,address,address,(uint256,uint256,uint256,uint256,uint256,int192,int192,int192,int192,int192,int192,int192,int192,int192),address,address,(address,address,address),address[]):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(vault),
        ethereum.Value.fromAddress(rsr),
        ethereum.Value.fromTuple(config),
        ethereum.Value.fromAddress(compound),
        ethereum.Value.fromAddress(aave),
        ethereum.Value.fromTuple(nonCollateral),
        ethereum.Value.fromAddressArray(collateral)
      ]
    );

    return result[0].toAddress();
  }

  try_deploy(
    name: string,
    symbol: string,
    owner: Address,
    vault: Address,
    rsr: Address,
    config: Deployer__deployInputConfigStruct,
    compound: Address,
    aave: Address,
    nonCollateral: Deployer__deployInputNonCollateralStruct,
    collateral: Array<Address>
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deploy",
      "deploy(string,string,address,address,address,(uint256,uint256,uint256,uint256,uint256,int192,int192,int192,int192,int192,int192,int192,int192,int192),address,address,(address,address,address),address[]):(address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromAddress(vault),
        ethereum.Value.fromAddress(rsr),
        ethereum.Value.fromTuple(config),
        ethereum.Value.fromAddress(compound),
        ethereum.Value.fromAddress(aave),
        ethereum.Value.fromTuple(nonCollateral),
        ethereum.Value.fromAddressArray(collateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployments(param0: BigInt): Address {
    let result = super.call("deployments", "deployments(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_deployments(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployments",
      "deployments(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class DeployCall extends ethereum.Call {
  get inputs(): DeployCall__Inputs {
    return new DeployCall__Inputs(this);
  }

  get outputs(): DeployCall__Outputs {
    return new DeployCall__Outputs(this);
  }
}

export class DeployCall__Inputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get vault(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get rsr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get config(): DeployCallConfigStruct {
    return this._call.inputValues[5].value.toTuple() as DeployCallConfigStruct;
  }

  get compound(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get aave(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get nonCollateral(): DeployCallNonCollateralStruct {
    return this._call.inputValues[8].value.toTuple() as DeployCallNonCollateralStruct;
  }

  get collateral(): Array<Address> {
    return this._call.inputValues[9].value.toAddressArray();
  }
}

export class DeployCall__Outputs {
  _call: DeployCall;

  constructor(call: DeployCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployCallConfigStruct extends ethereum.Tuple {
  get rewardStart(): BigInt {
    return this[0].toBigInt();
  }

  get rewardPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get auctionPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get stRSRWithdrawalDelay(): BigInt {
    return this[3].toBigInt();
  }

  get defaultDelay(): BigInt {
    return this[4].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[5].toBigInt();
  }

  get auctionClearingTolerance(): BigInt {
    return this[6].toBigInt();
  }

  get maxAuctionSize(): BigInt {
    return this[7].toBigInt();
  }

  get minRecapitalizationAuctionSize(): BigInt {
    return this[8].toBigInt();
  }

  get minRevenueAuctionSize(): BigInt {
    return this[9].toBigInt();
  }

  get migrationChunk(): BigInt {
    return this[10].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[11].toBigInt();
  }

  get defaultThreshold(): BigInt {
    return this[12].toBigInt();
  }

  get f(): BigInt {
    return this[13].toBigInt();
  }
}

export class DeployCallNonCollateralStruct extends ethereum.Tuple {
  get rsrAsset(): Address {
    return this[0].toAddress();
  }

  get compAsset(): Address {
    return this[1].toAddress();
  }

  get aaveAsset(): Address {
    return this[2].toAddress();
  }
}
