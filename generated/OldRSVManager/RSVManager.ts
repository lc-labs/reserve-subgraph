// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ProposalsCleared extends ethereum.Event {
  get params(): ProposalsCleared__Params {
    return new ProposalsCleared__Params(this);
  }
}

export class ProposalsCleared__Params {
  _event: ProposalsCleared;

  constructor(event: ProposalsCleared) {
    this._event = event;
  }
}

export class Issuance extends ethereum.Event {
  get params(): Issuance__Params {
    return new Issuance__Params(this);
  }
}

export class Issuance__Params {
  _event: Issuance;

  constructor(event: Issuance) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IssuancePausedChanged extends ethereum.Event {
  get params(): IssuancePausedChanged__Params {
    return new IssuancePausedChanged__Params(this);
  }
}

export class IssuancePausedChanged__Params {
  _event: IssuancePausedChanged;

  constructor(event: IssuancePausedChanged) {
    this._event = event;
  }

  get oldVal(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get newVal(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class EmergencyChanged extends ethereum.Event {
  get params(): EmergencyChanged__Params {
    return new EmergencyChanged__Params(this);
  }
}

export class EmergencyChanged__Params {
  _event: EmergencyChanged;

  constructor(event: EmergencyChanged) {
    this._event = event;
  }

  get oldVal(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }

  get newVal(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OperatorChanged extends ethereum.Event {
  get params(): OperatorChanged__Params {
    return new OperatorChanged__Params(this);
  }
}

export class OperatorChanged__Params {
  _event: OperatorChanged;

  constructor(event: OperatorChanged) {
    this._event = event;
  }

  get oldAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SeigniorageChanged extends ethereum.Event {
  get params(): SeigniorageChanged__Params {
    return new SeigniorageChanged__Params(this);
  }
}

export class SeigniorageChanged__Params {
  _event: SeigniorageChanged;

  constructor(event: SeigniorageChanged) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultChanged extends ethereum.Event {
  get params(): VaultChanged__Params {
    return new VaultChanged__Params(this);
  }
}

export class VaultChanged__Params {
  _event: VaultChanged;

  constructor(event: VaultChanged) {
    this._event = event;
  }

  get oldVaultAddr(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newVaultAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DelayChanged extends ethereum.Event {
  get params(): DelayChanged__Params {
    return new DelayChanged__Params(this);
  }
}

export class DelayChanged__Params {
  _event: DelayChanged;

  constructor(event: DelayChanged) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WeightsProposed extends ethereum.Event {
  get params(): WeightsProposed__Params {
    return new WeightsProposed__Params(this);
  }
}

export class WeightsProposed__Params {
  _event: WeightsProposed;

  constructor(event: WeightsProposed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get weights(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class SwapProposed extends ethereum.Event {
  get params(): SwapProposed__Params {
    return new SwapProposed__Params(this);
  }
}

export class SwapProposed__Params {
  _event: SwapProposed;

  constructor(event: SwapProposed) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokens(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get toVault(): Array<boolean> {
    return this._event.parameters[4].value.toBooleanArray();
  }
}

export class ProposalAccepted extends ethereum.Event {
  get params(): ProposalAccepted__Params {
    return new ProposalAccepted__Params(this);
  }
}

export class ProposalAccepted__Params {
  _event: ProposalAccepted;

  constructor(event: ProposalAccepted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ProposalCanceled extends ethereum.Event {
  get params(): ProposalCanceled__Params {
    return new ProposalCanceled__Params(this);
  }
}

export class ProposalCanceled__Params {
  _event: ProposalCanceled;

  constructor(event: ProposalCanceled) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get canceler(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get proposer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get executor(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get oldBasket(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get newBasket(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class NewOwnerNominated extends ethereum.Event {
  get params(): NewOwnerNominated__Params {
    return new NewOwnerNominated__Params(this);
  }
}

export class NewOwnerNominated__Params {
  _event: NewOwnerNominated;

  constructor(event: NewOwnerNominated) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nominee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RSVManager extends ethereum.SmartContract {
  static bind(address: Address): RSVManager {
    return new RSVManager("RSVManager", address);
  }

  isFullyCollateralized(): boolean {
    let result = super.call(
      "isFullyCollateralized",
      "isFullyCollateralized():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_isFullyCollateralized(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isFullyCollateralized",
      "isFullyCollateralized():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  toIssue(rsvAmount: BigInt): Array<BigInt> {
    let result = super.call("toIssue", "toIssue(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(rsvAmount)
    ]);

    return result[0].toBigIntArray();
  }

  try_toIssue(rsvAmount: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("toIssue", "toIssue(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(rsvAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  toRedeem(rsvAmount: BigInt): Array<BigInt> {
    let result = super.call("toRedeem", "toRedeem(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(rsvAmount)
    ]);

    return result[0].toBigIntArray();
  }

  try_toRedeem(rsvAmount: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("toRedeem", "toRedeem(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(rsvAmount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  trustedVault(): Address {
    let result = super.call("trustedVault", "trustedVault():(address)", []);

    return result[0].toAddress();
  }

  try_trustedVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("trustedVault", "trustedVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposalsLength(): BigInt {
    let result = super.call(
      "proposalsLength",
      "proposalsLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalsLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalsLength",
      "proposalsLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seigniorage(): BigInt {
    let result = super.call("seigniorage", "seigniorage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_seigniorage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("seigniorage", "seigniorage():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nominatedOwner(): Address {
    let result = super.call("nominatedOwner", "nominatedOwner():(address)", []);

    return result[0].toAddress();
  }

  try_nominatedOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nominatedOwner",
      "nominatedOwner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  operator(): Address {
    let result = super.call("operator", "operator():(address)", []);

    return result[0].toAddress();
  }

  try_operator(): ethereum.CallResult<Address> {
    let result = super.tryCall("operator", "operator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  delay(): BigInt {
    let result = super.call("delay", "delay():(uint256)", []);

    return result[0].toBigInt();
  }

  try_delay(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("delay", "delay():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proposeSwap(
    tokens: Array<Address>,
    amounts: Array<BigInt>,
    toVault: Array<boolean>
  ): BigInt {
    let result = super.call(
      "proposeSwap",
      "proposeSwap(address[],uint256[],bool[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBooleanArray(toVault)
      ]
    );

    return result[0].toBigInt();
  }

  try_proposeSwap(
    tokens: Array<Address>,
    amounts: Array<BigInt>,
    toVault: Array<boolean>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposeSwap",
      "proposeSwap(address[],uint256[],bool[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(amounts),
        ethereum.Value.fromBooleanArray(toVault)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trustedBasket(): Address {
    let result = super.call("trustedBasket", "trustedBasket():(address)", []);

    return result[0].toAddress();
  }

  try_trustedBasket(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedBasket",
      "trustedBasket():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trustedRSV(): Address {
    let result = super.call("trustedRSV", "trustedRSV():(address)", []);

    return result[0].toAddress();
  }

  try_trustedRSV(): ethereum.CallResult<Address> {
    let result = super.tryCall("trustedRSV", "trustedRSV():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trustedProposals(param0: BigInt): Address {
    let result = super.call(
      "trustedProposals",
      "trustedProposals(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_trustedProposals(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedProposals",
      "trustedProposals(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  issuancePaused(): boolean {
    let result = super.call("issuancePaused", "issuancePaused():(bool)", []);

    return result[0].toBoolean();
  }

  try_issuancePaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("issuancePaused", "issuancePaused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposeWeights(tokens: Array<Address>, weights: Array<BigInt>): BigInt {
    let result = super.call(
      "proposeWeights",
      "proposeWeights(address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(weights)
      ]
    );

    return result[0].toBigInt();
  }

  try_proposeWeights(
    tokens: Array<Address>,
    weights: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposeWeights",
      "proposeWeights(address[],uint256[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(tokens),
        ethereum.Value.fromUnsignedBigIntArray(weights)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  emergency(): boolean {
    let result = super.call("emergency", "emergency():(bool)", []);

    return result[0].toBoolean();
  }

  try_emergency(): ethereum.CallResult<boolean> {
    let result = super.tryCall("emergency", "emergency():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  trustedProposalFactory(): Address {
    let result = super.call(
      "trustedProposalFactory",
      "trustedProposalFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_trustedProposalFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedProposalFactory",
      "trustedProposalFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VERSION(): BigInt {
    let result = super.call("VERSION", "VERSION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_VERSION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("VERSION", "VERSION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class SetEmergencyCall extends ethereum.Call {
  get inputs(): SetEmergencyCall__Inputs {
    return new SetEmergencyCall__Inputs(this);
  }

  get outputs(): SetEmergencyCall__Outputs {
    return new SetEmergencyCall__Outputs(this);
  }
}

export class SetEmergencyCall__Inputs {
  _call: SetEmergencyCall;

  constructor(call: SetEmergencyCall) {
    this._call = call;
  }

  get val(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetEmergencyCall__Outputs {
  _call: SetEmergencyCall;

  constructor(call: SetEmergencyCall) {
    this._call = call;
  }
}

export class ExecuteProposalCall extends ethereum.Call {
  get inputs(): ExecuteProposalCall__Inputs {
    return new ExecuteProposalCall__Inputs(this);
  }

  get outputs(): ExecuteProposalCall__Outputs {
    return new ExecuteProposalCall__Outputs(this);
  }
}

export class ExecuteProposalCall__Inputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ExecuteProposalCall__Outputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }
}

export class NominateNewOwnerCall extends ethereum.Call {
  get inputs(): NominateNewOwnerCall__Inputs {
    return new NominateNewOwnerCall__Inputs(this);
  }

  get outputs(): NominateNewOwnerCall__Outputs {
    return new NominateNewOwnerCall__Outputs(this);
  }
}

export class NominateNewOwnerCall__Inputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class NominateNewOwnerCall__Outputs {
  _call: NominateNewOwnerCall;

  constructor(call: NominateNewOwnerCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }

  get declaration(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class ClearProposalsCall extends ethereum.Call {
  get inputs(): ClearProposalsCall__Inputs {
    return new ClearProposalsCall__Inputs(this);
  }

  get outputs(): ClearProposalsCall__Outputs {
    return new ClearProposalsCall__Outputs(this);
  }
}

export class ClearProposalsCall__Inputs {
  _call: ClearProposalsCall;

  constructor(call: ClearProposalsCall) {
    this._call = call;
  }
}

export class ClearProposalsCall__Outputs {
  _call: ClearProposalsCall;

  constructor(call: ClearProposalsCall) {
    this._call = call;
  }
}

export class AcceptProposalCall extends ethereum.Call {
  get inputs(): AcceptProposalCall__Inputs {
    return new AcceptProposalCall__Inputs(this);
  }

  get outputs(): AcceptProposalCall__Outputs {
    return new AcceptProposalCall__Outputs(this);
  }
}

export class AcceptProposalCall__Inputs {
  _call: AcceptProposalCall;

  constructor(call: AcceptProposalCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AcceptProposalCall__Outputs {
  _call: AcceptProposalCall;

  constructor(call: AcceptProposalCall) {
    this._call = call;
  }
}

export class SetVaultCall extends ethereum.Call {
  get inputs(): SetVaultCall__Inputs {
    return new SetVaultCall__Inputs(this);
  }

  get outputs(): SetVaultCall__Outputs {
    return new SetVaultCall__Outputs(this);
  }
}

export class SetVaultCall__Inputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }

  get newVaultAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultCall__Outputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ProposeSwapCall extends ethereum.Call {
  get inputs(): ProposeSwapCall__Inputs {
    return new ProposeSwapCall__Inputs(this);
  }

  get outputs(): ProposeSwapCall__Outputs {
    return new ProposeSwapCall__Outputs(this);
  }
}

export class ProposeSwapCall__Inputs {
  _call: ProposeSwapCall;

  constructor(call: ProposeSwapCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get toVault(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }
}

export class ProposeSwapCall__Outputs {
  _call: ProposeSwapCall;

  constructor(call: ProposeSwapCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetOperatorCall extends ethereum.Call {
  get inputs(): SetOperatorCall__Inputs {
    return new SetOperatorCall__Inputs(this);
  }

  get outputs(): SetOperatorCall__Outputs {
    return new SetOperatorCall__Outputs(this);
  }
}

export class SetOperatorCall__Inputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }

  get _operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOperatorCall__Outputs {
  _call: SetOperatorCall;

  constructor(call: SetOperatorCall) {
    this._call = call;
  }
}

export class SetIssuancePausedCall extends ethereum.Call {
  get inputs(): SetIssuancePausedCall__Inputs {
    return new SetIssuancePausedCall__Inputs(this);
  }

  get outputs(): SetIssuancePausedCall__Outputs {
    return new SetIssuancePausedCall__Outputs(this);
  }
}

export class SetIssuancePausedCall__Inputs {
  _call: SetIssuancePausedCall;

  constructor(call: SetIssuancePausedCall) {
    this._call = call;
  }

  get val(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetIssuancePausedCall__Outputs {
  _call: SetIssuancePausedCall;

  constructor(call: SetIssuancePausedCall) {
    this._call = call;
  }
}

export class ProposeWeightsCall extends ethereum.Call {
  get inputs(): ProposeWeightsCall__Inputs {
    return new ProposeWeightsCall__Inputs(this);
  }

  get outputs(): ProposeWeightsCall__Outputs {
    return new ProposeWeightsCall__Outputs(this);
  }
}

export class ProposeWeightsCall__Inputs {
  _call: ProposeWeightsCall;

  constructor(call: ProposeWeightsCall) {
    this._call = call;
  }

  get tokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get weights(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class ProposeWeightsCall__Outputs {
  _call: ProposeWeightsCall;

  constructor(call: ProposeWeightsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get rsvAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class SetSeigniorageCall extends ethereum.Call {
  get inputs(): SetSeigniorageCall__Inputs {
    return new SetSeigniorageCall__Inputs(this);
  }

  get outputs(): SetSeigniorageCall__Outputs {
    return new SetSeigniorageCall__Outputs(this);
  }
}

export class SetSeigniorageCall__Inputs {
  _call: SetSeigniorageCall;

  constructor(call: SetSeigniorageCall) {
    this._call = call;
  }

  get _seigniorage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSeigniorageCall__Outputs {
  _call: SetSeigniorageCall;

  constructor(call: SetSeigniorageCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get rsvAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class CancelProposalCall extends ethereum.Call {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class SetDelayCall extends ethereum.Call {
  get inputs(): SetDelayCall__Inputs {
    return new SetDelayCall__Inputs(this);
  }

  get outputs(): SetDelayCall__Outputs {
    return new SetDelayCall__Outputs(this);
  }
}

export class SetDelayCall__Inputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }

  get _delay(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDelayCall__Outputs {
  _call: SetDelayCall;

  constructor(call: SetDelayCall) {
    this._call = call;
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get vaultAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rsvAddr(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get proposalFactoryAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get basketAddr(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get operatorAddr(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _seigniorage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}
