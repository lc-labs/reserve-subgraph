// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BackupConfigSet extends ethereum.Event {
  get params(): BackupConfigSet__Params {
    return new BackupConfigSet__Params(this);
  }
}

export class BackupConfigSet__Params {
  _event: BackupConfigSet;

  constructor(event: BackupConfigSet) {
    this._event = event;
  }

  get targetName(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get max(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get erc20s(): Array<Address> {
    return this._event.parameters[2].value.toAddressArray();
  }
}

export class BasketSet extends ethereum.Event {
  get params(): BasketSet__Params {
    return new BasketSet__Params(this);
  }
}

export class BasketSet__Params {
  _event: BasketSet;

  constructor(event: BasketSet) {
    this._event = event;
  }

  get erc20s(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get refAmts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get defaulted(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class PrimeBasketSet extends ethereum.Event {
  get params(): PrimeBasketSet__Params {
    return new PrimeBasketSet__Params(this);
  }
}

export class PrimeBasketSet__Params {
  _event: PrimeBasketSet;

  constructor(event: PrimeBasketSet) {
    this._event = event;
  }

  get erc20s(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }

  get targetAmts(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get targetNames(): Array<Bytes> {
    return this._event.parameters[2].value.toBytesArray();
  }
}

export class BasketHandler__lastSetResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class BasketHandler__quoteResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class BasketHandler extends ethereum.SmartContract {
  static bind(address: Address): BasketHandler {
    return new BasketHandler("BasketHandler", address);
  }

  basketsHeldBy(account: Address): BigInt {
    let result = super.call(
      "basketsHeldBy",
      "basketsHeldBy(address):(int192)",
      [ethereum.Value.fromAddress(account)]
    );

    return result[0].toBigInt();
  }

  try_basketsHeldBy(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "basketsHeldBy",
      "basketsHeldBy(address):(int192)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fullyCapitalized(): boolean {
    let result = super.call(
      "fullyCapitalized",
      "fullyCapitalized():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_fullyCapitalized(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "fullyCapitalized",
      "fullyCapitalized():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastSet(): BasketHandler__lastSetResult {
    let result = super.call("lastSet", "lastSet():(uint256,uint256)", []);

    return new BasketHandler__lastSetResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_lastSet(): ethereum.CallResult<BasketHandler__lastSetResult> {
    let result = super.tryCall("lastSet", "lastSet():(uint256,uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BasketHandler__lastSetResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  main(): Address {
    let result = super.call("main", "main():(address)", []);

    return result[0].toAddress();
  }

  try_main(): ethereum.CallResult<Address> {
    let result = super.tryCall("main", "main():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  price(): BigInt {
    let result = super.call("price", "price():(int192)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quantity(erc20: Address): BigInt {
    let result = super.call("quantity", "quantity(address):(int192)", [
      ethereum.Value.fromAddress(erc20)
    ]);

    return result[0].toBigInt();
  }

  try_quantity(erc20: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quantity", "quantity(address):(int192)", [
      ethereum.Value.fromAddress(erc20)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  quote(amount: BigInt, rounding: i32): BasketHandler__quoteResult {
    let result = super.call(
      "quote",
      "quote(int192,uint8):(address[],uint256[])",
      [
        ethereum.Value.fromSignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(rounding))
      ]
    );

    return new BasketHandler__quoteResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray()
    );
  }

  try_quote(
    amount: BigInt,
    rounding: i32
  ): ethereum.CallResult<BasketHandler__quoteResult> {
    let result = super.tryCall(
      "quote",
      "quote(int192,uint8):(address[],uint256[])",
      [
        ethereum.Value.fromSignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(rounding))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BasketHandler__quoteResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray()
      )
    );
  }

  status(): i32 {
    let result = super.call("status", "status():(uint8)", []);

    return result[0].toI32();
  }

  try_status(): ethereum.CallResult<i32> {
    let result = super.tryCall("status", "status():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  switchBasket(): boolean {
    let result = super.call("switchBasket", "switchBasket():(bool)", []);

    return result[0].toBoolean();
  }

  try_switchBasket(): ethereum.CallResult<boolean> {
    let result = super.tryCall("switchBasket", "switchBasket():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class EnsureBasketCall extends ethereum.Call {
  get inputs(): EnsureBasketCall__Inputs {
    return new EnsureBasketCall__Inputs(this);
  }

  get outputs(): EnsureBasketCall__Outputs {
    return new EnsureBasketCall__Outputs(this);
  }
}

export class EnsureBasketCall__Inputs {
  _call: EnsureBasketCall;

  constructor(call: EnsureBasketCall) {
    this._call = call;
  }
}

export class EnsureBasketCall__Outputs {
  _call: EnsureBasketCall;

  constructor(call: EnsureBasketCall) {
    this._call = call;
  }
}

export class InitComponentCall extends ethereum.Call {
  get inputs(): InitComponentCall__Inputs {
    return new InitComponentCall__Inputs(this);
  }

  get outputs(): InitComponentCall__Outputs {
    return new InitComponentCall__Outputs(this);
  }
}

export class InitComponentCall__Inputs {
  _call: InitComponentCall;

  constructor(call: InitComponentCall) {
    this._call = call;
  }

  get main_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get args(): InitComponentCallArgsStruct {
    return changetype<InitComponentCallArgsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class InitComponentCall__Outputs {
  _call: InitComponentCall;

  constructor(call: InitComponentCall) {
    this._call = call;
  }
}

export class InitComponentCallArgsStruct extends ethereum.Tuple {
  get params(): InitComponentCallArgsParamsStruct {
    return changetype<InitComponentCallArgsParamsStruct>(this[0].toTuple());
  }

  get components(): InitComponentCallArgsComponentsStruct {
    return changetype<InitComponentCallArgsComponentsStruct>(this[1].toTuple());
  }

  get rsr(): Address {
    return this[2].toAddress();
  }

  get gnosis(): Address {
    return this[3].toAddress();
  }

  get assets(): Array<Address> {
    return this[4].toAddressArray();
  }
}

export class InitComponentCallArgsParamsStruct extends ethereum.Tuple {
  get maxTradeVolume(): BigInt {
    return this[0].toBigInt();
  }

  get dist(): InitComponentCallArgsParamsDistStruct {
    return changetype<InitComponentCallArgsParamsDistStruct>(this[1].toTuple());
  }

  get rewardPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get rewardRatio(): BigInt {
    return this[3].toBigInt();
  }

  get unstakingDelay(): BigInt {
    return this[4].toBigInt();
  }

  get tradingDelay(): BigInt {
    return this[5].toBigInt();
  }

  get auctionLength(): BigInt {
    return this[6].toBigInt();
  }

  get backingBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[8].toBigInt();
  }

  get dustAmount(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }
}

export class InitComponentCallArgsParamsDistStruct extends ethereum.Tuple {
  get rTokenDist(): i32 {
    return this[0].toI32();
  }

  get rsrDist(): i32 {
    return this[1].toI32();
  }
}

export class InitComponentCallArgsComponentsStruct extends ethereum.Tuple {
  get rToken(): Address {
    return this[0].toAddress();
  }

  get stRSR(): Address {
    return this[1].toAddress();
  }

  get assetRegistry(): Address {
    return this[2].toAddress();
  }

  get basketHandler(): Address {
    return this[3].toAddress();
  }

  get backingManager(): Address {
    return this[4].toAddress();
  }

  get distributor(): Address {
    return this[5].toAddress();
  }

  get furnace(): Address {
    return this[6].toAddress();
  }

  get broker(): Address {
    return this[7].toAddress();
  }

  get rsrTrader(): Address {
    return this[8].toAddress();
  }

  get rTokenTrader(): Address {
    return this[9].toAddress();
  }
}

export class SetBackupConfigCall extends ethereum.Call {
  get inputs(): SetBackupConfigCall__Inputs {
    return new SetBackupConfigCall__Inputs(this);
  }

  get outputs(): SetBackupConfigCall__Outputs {
    return new SetBackupConfigCall__Outputs(this);
  }
}

export class SetBackupConfigCall__Inputs {
  _call: SetBackupConfigCall;

  constructor(call: SetBackupConfigCall) {
    this._call = call;
  }

  get targetName(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get max(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get erc20s(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class SetBackupConfigCall__Outputs {
  _call: SetBackupConfigCall;

  constructor(call: SetBackupConfigCall) {
    this._call = call;
  }
}

export class SetPrimeBasketCall extends ethereum.Call {
  get inputs(): SetPrimeBasketCall__Inputs {
    return new SetPrimeBasketCall__Inputs(this);
  }

  get outputs(): SetPrimeBasketCall__Outputs {
    return new SetPrimeBasketCall__Outputs(this);
  }
}

export class SetPrimeBasketCall__Inputs {
  _call: SetPrimeBasketCall;

  constructor(call: SetPrimeBasketCall) {
    this._call = call;
  }

  get erc20s(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get targetAmts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class SetPrimeBasketCall__Outputs {
  _call: SetPrimeBasketCall;

  constructor(call: SetPrimeBasketCall) {
    this._call = call;
  }
}

export class SwitchBasketCall extends ethereum.Call {
  get inputs(): SwitchBasketCall__Inputs {
    return new SwitchBasketCall__Inputs(this);
  }

  get outputs(): SwitchBasketCall__Outputs {
    return new SwitchBasketCall__Outputs(this);
  }
}

export class SwitchBasketCall__Inputs {
  _call: SwitchBasketCall;

  constructor(call: SwitchBasketCall) {
    this._call = call;
  }
}

export class SwitchBasketCall__Outputs {
  _call: SwitchBasketCall;

  constructor(call: SwitchBasketCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
