// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BasketsNeededChanged extends ethereum.Event {
  get params(): BasketsNeededChanged__Params {
    return new BasketsNeededChanged__Params(this);
  }
}

export class BasketsNeededChanged__Params {
  _event: BasketsNeededChanged;

  constructor(event: BasketsNeededChanged) {
    this._event = event;
  }

  get oldBasketsNeeded(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newBasketsNeeded(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IssuanceRateSet extends ethereum.Event {
  get params(): IssuanceRateSet__Params {
    return new IssuanceRateSet__Params(this);
  }
}

export class IssuanceRateSet__Params {
  _event: IssuanceRateSet;

  constructor(event: IssuanceRateSet) {
    this._event = event;
  }

  get oldVal(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newVal(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class IssuanceStarted extends ethereum.Event {
  get params(): IssuanceStarted__Params {
    return new IssuanceStarted__Params(this);
  }
}

export class IssuanceStarted__Params {
  _event: IssuanceStarted;

  constructor(event: IssuanceStarted) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get index(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get baskets(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get erc20s(): Array<Address> {
    return this._event.parameters[4].value.toAddressArray();
  }

  get quantities(): Array<BigInt> {
    return this._event.parameters[5].value.toBigIntArray();
  }

  get blockAvailableAt(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class IssuancesCanceled extends ethereum.Event {
  get params(): IssuancesCanceled__Params {
    return new IssuancesCanceled__Params(this);
  }
}

export class IssuancesCanceled__Params {
  _event: IssuancesCanceled;

  constructor(event: IssuancesCanceled) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get firstId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class IssuancesCompleted extends ethereum.Event {
  get params(): IssuancesCompleted__Params {
    return new IssuancesCompleted__Params(this);
  }
}

export class IssuancesCompleted__Params {
  _event: IssuancesCompleted;

  constructor(event: IssuancesCompleted) {
    this._event = event;
  }

  get issuer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get firstId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get endId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MainSet extends ethereum.Event {
  get params(): MainSet__Params {
    return new MainSet__Params(this);
  }
}

export class MainSet__Params {
  _event: MainSet;

  constructor(event: MainSet) {
    this._event = event;
  }

  get oldMain(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newMain(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Melted extends ethereum.Event {
  get params(): Melted__Params {
    return new Melted__Params(this);
  }
}

export class Melted__Params {
  _event: Melted;

  constructor(event: Melted) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get baskets(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get erc20(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RToken__issuancesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromSignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromSignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class RToken extends ethereum.SmartContract {
  static bind(address: Address): RToken {
    return new RToken("RToken", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MIN_ISSUANCE_RATE(): BigInt {
    let result = super.call(
      "MIN_ISSUANCE_RATE",
      "MIN_ISSUANCE_RATE():(int192)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_ISSUANCE_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_ISSUANCE_RATE",
      "MIN_ISSUANCE_RATE():(int192)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  basketsNeeded(): BigInt {
    let result = super.call("basketsNeeded", "basketsNeeded():(int192)", []);

    return result[0].toBigInt();
  }

  try_basketsNeeded(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("basketsNeeded", "basketsNeeded():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cancel(endId: BigInt, earliest: boolean): Array<BigInt> {
    let result = super.call("cancel", "cancel(uint256,bool):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(endId),
      ethereum.Value.fromBoolean(earliest)
    ]);

    return result[0].toBigIntArray();
  }

  try_cancel(
    endId: BigInt,
    earliest: boolean
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("cancel", "cancel(uint256,bool):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(endId),
      ethereum.Value.fromBoolean(earliest)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  endIdForVest(account: Address): BigInt {
    let result = super.call("endIdForVest", "endIdForVest(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_endIdForVest(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "endIdForVest",
      "endIdForVest(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  issuanceRate(): BigInt {
    let result = super.call("issuanceRate", "issuanceRate():(int192)", []);

    return result[0].toBigInt();
  }

  try_issuanceRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("issuanceRate", "issuanceRate():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  issuances(param0: Address, param1: BigInt): RToken__issuancesResult {
    let result = super.call(
      "issuances",
      "issuances(address,uint256):(address,uint256,int192,uint256,int192,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new RToken__issuancesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_issuances(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<RToken__issuancesResult> {
    let result = super.tryCall(
      "issuances",
      "issuances(address,uint256):(address,uint256,int192,uint256,int192,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RToken__issuancesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  issue(amount: BigInt): Array<BigInt> {
    let result = super.call("issue", "issue(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigIntArray();
  }

  try_issue(amount: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("issue", "issue(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  maxIssuable(account: Address): BigInt {
    let result = super.call("maxIssuable", "maxIssuable(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_maxIssuable(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxIssuable",
      "maxIssuable(address):(uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  price(): BigInt {
    let result = super.call("price", "price():(int192)", []);

    return result[0].toBigInt();
  }

  try_price(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("price", "price():(int192)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(amount: BigInt): Array<BigInt> {
    let result = super.call("redeem", "redeem(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigIntArray();
  }

  try_redeem(amount: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("redeem", "redeem(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  vest(account: Address, endId: BigInt): BigInt {
    let result = super.call("vest", "vest(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(endId)
    ]);

    return result[0].toBigInt();
  }

  try_vest(account: Address, endId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vest", "vest(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(account),
      ethereum.Value.fromUnsignedBigInt(endId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CancelCall extends ethereum.Call {
  get inputs(): CancelCall__Inputs {
    return new CancelCall__Inputs(this);
  }

  get outputs(): CancelCall__Outputs {
    return new CancelCall__Outputs(this);
  }
}

export class CancelCall__Inputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get endId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get earliest(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class CancelCall__Outputs {
  _call: CancelCall;

  constructor(call: CancelCall) {
    this._call = call;
  }

  get deposits(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class ClaimAndSweepRewardsCall extends ethereum.Call {
  get inputs(): ClaimAndSweepRewardsCall__Inputs {
    return new ClaimAndSweepRewardsCall__Inputs(this);
  }

  get outputs(): ClaimAndSweepRewardsCall__Outputs {
    return new ClaimAndSweepRewardsCall__Outputs(this);
  }
}

export class ClaimAndSweepRewardsCall__Inputs {
  _call: ClaimAndSweepRewardsCall;

  constructor(call: ClaimAndSweepRewardsCall) {
    this._call = call;
  }
}

export class ClaimAndSweepRewardsCall__Outputs {
  _call: ClaimAndSweepRewardsCall;

  constructor(call: ClaimAndSweepRewardsCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitComponentCall extends ethereum.Call {
  get inputs(): InitComponentCall__Inputs {
    return new InitComponentCall__Inputs(this);
  }

  get outputs(): InitComponentCall__Outputs {
    return new InitComponentCall__Outputs(this);
  }
}

export class InitComponentCall__Inputs {
  _call: InitComponentCall;

  constructor(call: InitComponentCall) {
    this._call = call;
  }

  get main_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get args(): InitComponentCallArgsStruct {
    return changetype<InitComponentCallArgsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class InitComponentCall__Outputs {
  _call: InitComponentCall;

  constructor(call: InitComponentCall) {
    this._call = call;
  }
}

export class InitComponentCallArgsStruct extends ethereum.Tuple {
  get params(): InitComponentCallArgsParamsStruct {
    return changetype<InitComponentCallArgsParamsStruct>(this[0].toTuple());
  }

  get core(): InitComponentCallArgsCoreStruct {
    return changetype<InitComponentCallArgsCoreStruct>(this[1].toTuple());
  }

  get periphery(): InitComponentCallArgsPeripheryStruct {
    return changetype<InitComponentCallArgsPeripheryStruct>(this[2].toTuple());
  }

  get rsr(): Address {
    return this[3].toAddress();
  }
}

export class InitComponentCallArgsParamsStruct extends ethereum.Tuple {
  get maxAuctionSize(): BigInt {
    return this[0].toBigInt();
  }

  get dist(): InitComponentCallArgsParamsDistStruct {
    return changetype<InitComponentCallArgsParamsDistStruct>(this[1].toTuple());
  }

  get rewardPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get rewardRatio(): BigInt {
    return this[3].toBigInt();
  }

  get unstakingDelay(): BigInt {
    return this[4].toBigInt();
  }

  get auctionDelay(): BigInt {
    return this[5].toBigInt();
  }

  get auctionLength(): BigInt {
    return this[6].toBigInt();
  }

  get backingBuffer(): BigInt {
    return this[7].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[8].toBigInt();
  }

  get dustAmount(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }
}

export class InitComponentCallArgsParamsDistStruct extends ethereum.Tuple {
  get rTokenDist(): i32 {
    return this[0].toI32();
  }

  get rsrDist(): i32 {
    return this[1].toI32();
  }
}

export class InitComponentCallArgsCoreStruct extends ethereum.Tuple {
  get rToken(): Address {
    return this[0].toAddress();
  }

  get stRSR(): Address {
    return this[1].toAddress();
  }

  get assetRegistry(): Address {
    return this[2].toAddress();
  }

  get basketHandler(): Address {
    return this[3].toAddress();
  }

  get backingManager(): Address {
    return this[4].toAddress();
  }

  get distributor(): Address {
    return this[5].toAddress();
  }

  get rsrTrader(): Address {
    return this[6].toAddress();
  }

  get rTokenTrader(): Address {
    return this[7].toAddress();
  }
}

export class InitComponentCallArgsPeripheryStruct extends ethereum.Tuple {
  get market(): Address {
    return this[0].toAddress();
  }

  get furnace(): Address {
    return this[1].toAddress();
  }

  get assets(): Array<Address> {
    return this[2].toAddressArray();
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get deposits(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class MeltCall extends ethereum.Call {
  get inputs(): MeltCall__Inputs {
    return new MeltCall__Inputs(this);
  }

  get outputs(): MeltCall__Outputs {
    return new MeltCall__Outputs(this);
  }
}

export class MeltCall__Inputs {
  _call: MeltCall;

  constructor(call: MeltCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MeltCall__Outputs {
  _call: MeltCall;

  constructor(call: MeltCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get withdrawals(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class SetBasketsNeededCall extends ethereum.Call {
  get inputs(): SetBasketsNeededCall__Inputs {
    return new SetBasketsNeededCall__Inputs(this);
  }

  get outputs(): SetBasketsNeededCall__Outputs {
    return new SetBasketsNeededCall__Outputs(this);
  }
}

export class SetBasketsNeededCall__Inputs {
  _call: SetBasketsNeededCall;

  constructor(call: SetBasketsNeededCall) {
    this._call = call;
  }

  get basketsNeeded_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBasketsNeededCall__Outputs {
  _call: SetBasketsNeededCall;

  constructor(call: SetBasketsNeededCall) {
    this._call = call;
  }
}

export class SetIssuanceRateCall extends ethereum.Call {
  get inputs(): SetIssuanceRateCall__Inputs {
    return new SetIssuanceRateCall__Inputs(this);
  }

  get outputs(): SetIssuanceRateCall__Outputs {
    return new SetIssuanceRateCall__Outputs(this);
  }
}

export class SetIssuanceRateCall__Inputs {
  _call: SetIssuanceRateCall;

  constructor(call: SetIssuanceRateCall) {
    this._call = call;
  }

  get val(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetIssuanceRateCall__Outputs {
  _call: SetIssuanceRateCall;

  constructor(call: SetIssuanceRateCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class VestCall extends ethereum.Call {
  get inputs(): VestCall__Inputs {
    return new VestCall__Inputs(this);
  }

  get outputs(): VestCall__Outputs {
    return new VestCall__Outputs(this);
  }
}

export class VestCall__Inputs {
  _call: VestCall;

  constructor(call: VestCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get endId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class VestCall__Outputs {
  _call: VestCall;

  constructor(call: VestCall) {
    this._call = call;
  }

  get vested(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
