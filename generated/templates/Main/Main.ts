// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class IssuanceCanceled extends ethereum.Event {
  get params(): IssuanceCanceled__Params {
    return new IssuanceCanceled__Params(this);
  }
}

export class IssuanceCanceled__Params {
  _event: IssuanceCanceled;

  constructor(event: IssuanceCanceled) {
    this._event = event;
  }

  get issuanceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class IssuanceCompleted extends ethereum.Event {
  get params(): IssuanceCompleted__Params {
    return new IssuanceCompleted__Params(this);
  }
}

export class IssuanceCompleted__Params {
  _event: IssuanceCompleted;

  constructor(event: IssuanceCompleted) {
    this._event = event;
  }

  get issuanceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class IssuanceStarted extends ethereum.Event {
  get params(): IssuanceStarted__Params {
    return new IssuanceStarted__Params(this);
  }
}

export class IssuanceStarted__Params {
  _event: IssuanceStarted;

  constructor(event: IssuanceStarted) {
    this._event = event;
  }

  get issuanceId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get issuer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get blockAvailableAt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redemption extends ethereum.Event {
  get params(): Redemption__Params {
    return new Redemption__Params(this);
  }
}

export class Redemption__Params {
  _event: Redemption;

  constructor(event: Redemption) {
    this._event = event;
  }

  get redeemer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class SystemStateChanged extends ethereum.Event {
  get params(): SystemStateChanged__Params {
    return new SystemStateChanged__Params(this);
  }
}

export class SystemStateChanged__Params {
  _event: SystemStateChanged;

  constructor(event: SystemStateChanged) {
    this._event = event;
  }

  get oldState(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get newState(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Main__configResultValue0Struct extends ethereum.Tuple {
  get rewardStart(): BigInt {
    return this[0].toBigInt();
  }

  get rewardPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get auctionPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get stRSRWithdrawalDelay(): BigInt {
    return this[3].toBigInt();
  }

  get defaultDelay(): BigInt {
    return this[4].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[5].toBigInt();
  }

  get maxAuctionSize(): BigInt {
    return this[6].toBigInt();
  }

  get minRecapitalizationAuctionSize(): BigInt {
    return this[7].toBigInt();
  }

  get minRevenueAuctionSize(): BigInt {
    return this[8].toBigInt();
  }

  get migrationChunk(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }

  get defaultThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get f(): BigInt {
    return this[12].toBigInt();
  }
}

export class Main__issuancesResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Address;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: Address,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }
}

export class Main extends ethereum.SmartContract {
  static bind(address: Address): Main {
    return new Main("Main", address);
  }

  aaveAsset(): Address {
    let result = super.call("aaveAsset", "aaveAsset():(address)", []);

    return result[0].toAddress();
  }

  try_aaveAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("aaveAsset", "aaveAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  aaveLendingPool(): Address {
    let result = super.call(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_aaveLendingPool(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "aaveLendingPool",
      "aaveLendingPool():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  backingTokens(): Array<Address> {
    let result = super.call("backingTokens", "backingTokens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_backingTokens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "backingTokens",
      "backingTokens():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  compAsset(): Address {
    let result = super.call("compAsset", "compAsset():(address)", []);

    return result[0].toAddress();
  }

  try_compAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("compAsset", "compAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  comptroller(): Address {
    let result = super.call("comptroller", "comptroller():(address)", []);

    return result[0].toAddress();
  }

  try_comptroller(): ethereum.CallResult<Address> {
    let result = super.tryCall("comptroller", "comptroller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  config(): Main__configResultValue0Struct {
    let result = super.call(
      "config",
      "config():((uint256,uint256,uint256,uint256,uint256,int192,int192,int192,int192,int192,int192,int192,int192))",
      []
    );

    return changetype<Main__configResultValue0Struct>(result[0].toTuple());
  }

  try_config(): ethereum.CallResult<Main__configResultValue0Struct> {
    let result = super.tryCall(
      "config",
      "config():((uint256,uint256,uint256,uint256,uint256,int192,int192,int192,int192,int192,int192,int192,int192))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Main__configResultValue0Struct>(value[0].toTuple())
    );
  }

  consultOracle(source: i32, token: Address): BigInt {
    let result = super.call(
      "consultOracle",
      "consultOracle(uint8,address):(int192)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(source)),
        ethereum.Value.fromAddress(token)
      ]
    );

    return result[0].toBigInt();
  }

  try_consultOracle(source: i32, token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consultOracle",
      "consultOracle(uint8,address):(int192)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(source)),
        ethereum.Value.fromAddress(token)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  furnace(): Address {
    let result = super.call("furnace", "furnace():(address)", []);

    return result[0].toAddress();
  }

  try_furnace(): ethereum.CallResult<Address> {
    let result = super.tryCall("furnace", "furnace():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  issuances(param0: BigInt): Main__issuancesResult {
    let result = super.call(
      "issuances",
      "issuances(uint256):(address,uint256,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Main__issuancesResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_issuances(param0: BigInt): ethereum.CallResult<Main__issuancesResult> {
    let result = super.tryCall(
      "issuances",
      "issuances(uint256):(address,uint256,uint256,address,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Main__issuancesResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  monitor(): Address {
    let result = super.call("monitor", "monitor():(address)", []);

    return result[0].toAddress();
  }

  try_monitor(): ethereum.CallResult<Address> {
    let result = super.tryCall("monitor", "monitor():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nextRewards(): BigInt {
    let result = super.call("nextRewards", "nextRewards():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextRewards(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextRewards", "nextRewards():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pauser(): Address {
    let result = super.call("pauser", "pauser():(address)", []);

    return result[0].toAddress();
  }

  try_pauser(): ethereum.CallResult<Address> {
    let result = super.tryCall("pauser", "pauser():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quote(amount: BigInt): Array<BigInt> {
    let result = super.call("quote", "quote(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBigIntArray();
  }

  try_quote(amount: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("quote", "quote(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  rToken(): Address {
    let result = super.call("rToken", "rToken():(address)", []);

    return result[0].toAddress();
  }

  try_rToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rToken", "rToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rTokenAsset(): Address {
    let result = super.call("rTokenAsset", "rTokenAsset():(address)", []);

    return result[0].toAddress();
  }

  try_rTokenAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("rTokenAsset", "rTokenAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rsr(): Address {
    let result = super.call("rsr", "rsr():(address)", []);

    return result[0].toAddress();
  }

  try_rsr(): ethereum.CallResult<Address> {
    let result = super.tryCall("rsr", "rsr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rsrAsset(): Address {
    let result = super.call("rsrAsset", "rsrAsset():(address)", []);

    return result[0].toAddress();
  }

  try_rsrAsset(): ethereum.CallResult<Address> {
    let result = super.tryCall("rsrAsset", "rsrAsset():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stRSR(): Address {
    let result = super.call("stRSR", "stRSR():(address)", []);

    return result[0].toAddress();
  }

  try_stRSR(): ethereum.CallResult<Address> {
    let result = super.tryCall("stRSR", "stRSR():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  state(): i32 {
    let result = super.call("state", "state():(uint8)", []);

    return result[0].toI32();
  }

  try_state(): ethereum.CallResult<i32> {
    let result = super.tryCall("state", "state():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  stateRaisedAt(): BigInt {
    let result = super.call("stateRaisedAt", "stateRaisedAt():(uint256)", []);

    return result[0].toBigInt();
  }

  try_stateRaisedAt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stateRaisedAt",
      "stateRaisedAt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get oracle_(): ConstructorCallOracle_Struct {
    return changetype<ConstructorCallOracle_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get config_(): ConstructorCallConfig_Struct {
    return changetype<ConstructorCallConfig_Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCallOracle_Struct extends ethereum.Tuple {
  get compound(): Address {
    return this[0].toAddress();
  }

  get aave(): Address {
    return this[1].toAddress();
  }
}

export class ConstructorCallConfig_Struct extends ethereum.Tuple {
  get rewardStart(): BigInt {
    return this[0].toBigInt();
  }

  get rewardPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get auctionPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get stRSRWithdrawalDelay(): BigInt {
    return this[3].toBigInt();
  }

  get defaultDelay(): BigInt {
    return this[4].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[5].toBigInt();
  }

  get maxAuctionSize(): BigInt {
    return this[6].toBigInt();
  }

  get minRecapitalizationAuctionSize(): BigInt {
    return this[7].toBigInt();
  }

  get minRevenueAuctionSize(): BigInt {
    return this[8].toBigInt();
  }

  get migrationChunk(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }

  get defaultThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get f(): BigInt {
    return this[12].toBigInt();
  }
}

export class IssueCall extends ethereum.Call {
  get inputs(): IssueCall__Inputs {
    return new IssueCall__Inputs(this);
  }

  get outputs(): IssueCall__Outputs {
    return new IssueCall__Outputs(this);
  }
}

export class IssueCall__Inputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class IssueCall__Outputs {
  _call: IssueCall;

  constructor(call: IssueCall) {
    this._call = call;
  }
}

export class NoticeDefaultCall extends ethereum.Call {
  get inputs(): NoticeDefaultCall__Inputs {
    return new NoticeDefaultCall__Inputs(this);
  }

  get outputs(): NoticeDefaultCall__Outputs {
    return new NoticeDefaultCall__Outputs(this);
  }
}

export class NoticeDefaultCall__Inputs {
  _call: NoticeDefaultCall;

  constructor(call: NoticeDefaultCall) {
    this._call = call;
  }
}

export class NoticeDefaultCall__Outputs {
  _call: NoticeDefaultCall;

  constructor(call: NoticeDefaultCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PokeCall extends ethereum.Call {
  get inputs(): PokeCall__Inputs {
    return new PokeCall__Inputs(this);
  }

  get outputs(): PokeCall__Outputs {
    return new PokeCall__Outputs(this);
  }
}

export class PokeCall__Inputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }
}

export class PokeCall__Outputs {
  _call: PokeCall;

  constructor(call: PokeCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAssetsCall extends ethereum.Call {
  get inputs(): SetAssetsCall__Inputs {
    return new SetAssetsCall__Inputs(this);
  }

  get outputs(): SetAssetsCall__Outputs {
    return new SetAssetsCall__Outputs(this);
  }
}

export class SetAssetsCall__Inputs {
  _call: SetAssetsCall;

  constructor(call: SetAssetsCall) {
    this._call = call;
  }

  get rToken_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get rsr_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get comp_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get aave_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetAssetsCall__Outputs {
  _call: SetAssetsCall;

  constructor(call: SetAssetsCall) {
    this._call = call;
  }
}

export class SetConfigCall extends ethereum.Call {
  get inputs(): SetConfigCall__Inputs {
    return new SetConfigCall__Inputs(this);
  }

  get outputs(): SetConfigCall__Outputs {
    return new SetConfigCall__Outputs(this);
  }
}

export class SetConfigCall__Inputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }

  get config_(): SetConfigCallConfig_Struct {
    return changetype<SetConfigCallConfig_Struct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetConfigCall__Outputs {
  _call: SetConfigCall;

  constructor(call: SetConfigCall) {
    this._call = call;
  }
}

export class SetConfigCallConfig_Struct extends ethereum.Tuple {
  get rewardStart(): BigInt {
    return this[0].toBigInt();
  }

  get rewardPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get auctionPeriod(): BigInt {
    return this[2].toBigInt();
  }

  get stRSRWithdrawalDelay(): BigInt {
    return this[3].toBigInt();
  }

  get defaultDelay(): BigInt {
    return this[4].toBigInt();
  }

  get maxTradeSlippage(): BigInt {
    return this[5].toBigInt();
  }

  get maxAuctionSize(): BigInt {
    return this[6].toBigInt();
  }

  get minRecapitalizationAuctionSize(): BigInt {
    return this[7].toBigInt();
  }

  get minRevenueAuctionSize(): BigInt {
    return this[8].toBigInt();
  }

  get migrationChunk(): BigInt {
    return this[9].toBigInt();
  }

  get issuanceRate(): BigInt {
    return this[10].toBigInt();
  }

  get defaultThreshold(): BigInt {
    return this[11].toBigInt();
  }

  get f(): BigInt {
    return this[12].toBigInt();
  }
}

export class SetFurnaceCall extends ethereum.Call {
  get inputs(): SetFurnaceCall__Inputs {
    return new SetFurnaceCall__Inputs(this);
  }

  get outputs(): SetFurnaceCall__Outputs {
    return new SetFurnaceCall__Outputs(this);
  }
}

export class SetFurnaceCall__Inputs {
  _call: SetFurnaceCall;

  constructor(call: SetFurnaceCall) {
    this._call = call;
  }

  get furnace_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFurnaceCall__Outputs {
  _call: SetFurnaceCall;

  constructor(call: SetFurnaceCall) {
    this._call = call;
  }
}

export class SetManagerCall extends ethereum.Call {
  get inputs(): SetManagerCall__Inputs {
    return new SetManagerCall__Inputs(this);
  }

  get outputs(): SetManagerCall__Outputs {
    return new SetManagerCall__Outputs(this);
  }
}

export class SetManagerCall__Inputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }

  get manager_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetManagerCall__Outputs {
  _call: SetManagerCall;

  constructor(call: SetManagerCall) {
    this._call = call;
  }
}

export class SetMonitorCall extends ethereum.Call {
  get inputs(): SetMonitorCall__Inputs {
    return new SetMonitorCall__Inputs(this);
  }

  get outputs(): SetMonitorCall__Outputs {
    return new SetMonitorCall__Outputs(this);
  }
}

export class SetMonitorCall__Inputs {
  _call: SetMonitorCall;

  constructor(call: SetMonitorCall) {
    this._call = call;
  }

  get monitor_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetMonitorCall__Outputs {
  _call: SetMonitorCall;

  constructor(call: SetMonitorCall) {
    this._call = call;
  }
}

export class SetOracleCall extends ethereum.Call {
  get inputs(): SetOracleCall__Inputs {
    return new SetOracleCall__Inputs(this);
  }

  get outputs(): SetOracleCall__Outputs {
    return new SetOracleCall__Outputs(this);
  }
}

export class SetOracleCall__Inputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }

  get oracle(): SetOracleCallOracleStruct {
    return changetype<SetOracleCallOracleStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetOracleCall__Outputs {
  _call: SetOracleCall;

  constructor(call: SetOracleCall) {
    this._call = call;
  }
}

export class SetOracleCallOracleStruct extends ethereum.Tuple {
  get compound(): Address {
    return this[0].toAddress();
  }

  get aave(): Address {
    return this[1].toAddress();
  }
}

export class SetPauserCall extends ethereum.Call {
  get inputs(): SetPauserCall__Inputs {
    return new SetPauserCall__Inputs(this);
  }

  get outputs(): SetPauserCall__Outputs {
    return new SetPauserCall__Outputs(this);
  }
}

export class SetPauserCall__Inputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }

  get pauser_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPauserCall__Outputs {
  _call: SetPauserCall;

  constructor(call: SetPauserCall) {
    this._call = call;
  }
}

export class SetStRSRCall extends ethereum.Call {
  get inputs(): SetStRSRCall__Inputs {
    return new SetStRSRCall__Inputs(this);
  }

  get outputs(): SetStRSRCall__Outputs {
    return new SetStRSRCall__Outputs(this);
  }
}

export class SetStRSRCall__Inputs {
  _call: SetStRSRCall;

  constructor(call: SetStRSRCall) {
    this._call = call;
  }

  get stRSR_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStRSRCall__Outputs {
  _call: SetStRSRCall;

  constructor(call: SetStRSRCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
